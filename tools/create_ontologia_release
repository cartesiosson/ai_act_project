#!/bin/bash

set -e

# === Configuraci√≥n ===
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"

ENV_FILE="$SCRIPT_DIR/ontologias.env"
ONTOLOGY_DIR="$PROJECT_DIR/ontologias"
VERSION_ROOT="$ONTOLOGY_DIR/versions"

if [ ! -f "$ENV_FILE" ]; then
    echo "‚ùå No se encuentra el fichero de configuraci√≥n $ENV_FILE"
    exit 1
fi

source "$ENV_FILE"

if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker no est√° instalado o no est√° en el PATH"
    exit 1
fi

# === Leer versi√≥n actual ===
CURRENT_VERSION="$CURRENT_RELEASE"
VERSION_FILE="$ENV_FILE"

increment_version() {
    local version=$1
    local mode=$2
    IFS='.' read -r major minor patch <<< "$version"
    case "$mode" in
        major) ((major++)); minor=0; patch=0 ;;
        minor) ((minor++)); patch=0 ;;
        patch) ((patch++)) ;;
        *) echo "‚ùå Modo de versi√≥n inv√°lido: $mode"; exit 1 ;;
    esac
    echo "$major.$minor.$patch"
}

# === Par√°metros ===
if [[ "$1" != "--release" || -z "$2" ]]; then
    echo "Uso: $0 --release [major|minor|patch] [--ok]"
    exit 1
fi

MODE="$2"
OK_MODE=false
if [[ "$3" == "--ok" ]]; then
    OK_MODE=true
fi

NEW_VERSION=$(increment_version "$CURRENT_VERSION" "$MODE")
echo "Generando nueva versi√≥n: $NEW_VERSION (desde $CURRENT_VERSION)"

# === Procesar ficheros TTL ===
mkdir -p "$VERSION_ROOT/$NEW_VERSION"

for file in "$ONTOLOGY_DIR"/*-v$CURRENT_VERSION.ttl; do
    filename=$(basename -- "$file")
    basename_noext="${filename%-v$CURRENT_VERSION.ttl}"
    versioned_file="$VERSION_ROOT/$NEW_VERSION/${basename_noext}-v$NEW_VERSION.ttl"

    # === Extraer cabecera y cuerpo ===
    header=$(awk '/^<http:\/\/ai-act.eu\// {exit} {print}' "$file")
    body=$(awk '/^<http:\/\/ai-act.eu\// {found=1} found' "$file")

    ontology_uri="http://ai-act.eu/${basename_noext}"
    today=$(date +%F)

    # === Construir clean_body y owl:imports ===
    if [[ "$basename_noext" == "ai-act" ]]; then
        clean_body=""
        imports_block=""
        for imported in "$ONTOLOGY_DIR"/*-v$CURRENT_VERSION.ttl; do
            imp_name=$(basename -- "$imported")
            if [[ "$imp_name" != ai-act-* ]]; then
                mod_name="${imp_name%%-v*}"
                imports_block="${imports_block}
        <${ontology_uri}> owl:imports <$BASE_IMPORT_IRI/${mod_name}-v${NEW_VERSION}.ttl> ."
            fi
        done
    else
        if grep -q '^ai:' <<< "$body"; then
            clean_body=$(awk '/^ai:/ {found=1} found' <<< "$body")
        else
            clean_body="$body"
        fi
        imports_block=""
    fi

    # === Nueva cabecera y metadatos ===
    new_header="@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix ai: <http://ai-act.eu/ai#> ."

    metadata_block="
<${ontology_uri}>
    a owl:Ontology ;
    owl:versionIRI <${ontology_uri}/${NEW_VERSION}> ;
    owl:versionInfo \"Versi√≥n $NEW_VERSION publicada el $today\"@es ,
                    \"Version $NEW_VERSION released on $today\"@en ;
    rdfs:comment \"Ontolog√≠a del m√≥dulo ${basename_noext} del AI Act.\"@es ,
                 \"${basename_noext^} module of the AI Act ontology.\"@en ;
    dcterms:created \"$today\"^^xsd:date ."

    # === Escritura final del archivo versionado ===
    echo -e "$new_header\n\n$metadata_block$imports_block\n\n$clean_body" > "$versioned_file"

    docker run --rm -v "$VERSION_ROOT/$NEW_VERSION:/data" stain/jena riot "/data/$(basename "$versioned_file")" &> /dev/null && \
        echo "‚úî Validado RDF con riot: $versioned_file" || \
        echo "‚ùå Error RDF en $versioned_file"

    if $OK_MODE; then
        cp "$versioned_file" "$ONTOLOGY_DIR"
        echo "üîÅ Sustituido $filename con versi√≥n $NEW_VERSION"
    fi
done

# === Borrar versiones anteriores si --ok ===
if $OK_MODE; then
    for oldfile in "$ONTOLOGY_DIR"/*-v$CURRENT_VERSION.ttl; do
        [ -f "$oldfile" ] && rm -f "$oldfile"
    done
fi

# === Actualizar versi√≥n actual ===
sed -i "s/^CURRENT_RELEASE=.*/CURRENT_RELEASE=$NEW_VERSION/" "$VERSION_FILE"
echo "‚úÖ Versi√≥n actualizada a $NEW_VERSION en $VERSION_FILE"
